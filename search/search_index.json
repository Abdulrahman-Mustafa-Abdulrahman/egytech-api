{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Egytech API","text":"<p>A simple python wrapper for Egytech's API.</p>"},{"location":"#description","title":"Description","text":"<ul> <li>Leverage the type safety and input validity checking of pydantic.<ul> <li>It creates enums for all user-side inputs, making sure that all outgoing api requests are correct.</li> <li>It also leverages request pooling offered by httpx. This leads to more performant api requests when making   multiple requests in a short period of time.</li> </ul> </li> <li>Extract the api call results as a pandas dataframe, focus on your logic.</li> <li>Export the data in <code>.csv</code>, or <code>.xslx</code> format.</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#dependencies","title":"Dependencies","text":"<ul> <li>Python 3.11, any newer python version should work.</li> <li>This project is os-agnostic, it should work on any os with a python interpreter.</li> </ul>"},{"location":"#installing","title":"Installing","text":"<ul> <li>To install with pip, run the following command:</li> </ul> <pre><code>pip install egytech_api\n</code></pre>"},{"location":"#quickstart","title":"Quickstart","text":"<p>To make a simple API request that fetches survey data of participants who have a computer science degree and a \"backend\" job title, you can do the following:</p> <pre><code>from egytech_api.core import Participants\n\n# Create a Participants object\nparticipants = Participants(title=\"backend\", cs_degree=True)\n\n# Fetch the data\ndf = participants.get_df()\n\n# Print the first 5 rows of the dataframe\ndf.head()\n</code></pre>"},{"location":"#full-documentation","title":"Full Documentation","text":"<p>The full documentation can be found here.</p>"},{"location":"#examples","title":"Examples","text":"<ul> <li>Example   of <code>egytech_api.core.PoolingClient</code>   usage in the   docs   and as   a demo notebook.</li> <li>This Colab notebook demonstrates how significantly using connection pooling alone or asynchronously can improve   response time. Review   results here.</li> </ul>"},{"location":"#to-do","title":"To-Do","text":"<ul> <li>Implement query response deserialization with pydantic models, leveraging fast type-safe deserialization as well as   greater dumping flexibility.</li> <li>Implement an async-compatible PoolingClient, allowing for even faster performance with multiple asynchronous API   calls.</li> <li>Make user imports for basic usage more developer-friendly.</li> <li>Implement other formats of data output (differently formatted DataFrame, ability to exclude and rename columns,   ability to report na values across columns on client initialization among other features).</li> <li>Implement oauth2.0-compliant auth flow within the wrapper for future usage (in case the api implements auth in the   future).</li> <li>Implement logging and custom error handling for better diagnostics.</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the License file for details.</p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>This Project uses the following libraries:</p> <p></p>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2024 Abdulrahman Mustafa Abdulrahman</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"classes/async-pooling-client/","title":"AsyncPoolingClient","text":"<p>               Bases: <code>BaseModel</code></p> <p>Class for asynchronously pooling multiple API calls with different query parameters into one object.</p> <p>Attributes:</p> Name Type Description <code>queries</code> <code>list of `ParticipantsQueryParams`</code> <p>The list of query parameters for the participants endpoint.</p> <code>_dataframe</code> <code>DataFrame</code> <p>The resulting pandas.DataFrame of the participants from the API Call.</p> <p>Methods:</p> Name Description <code>get_df</code> <p>Returns the <code>pandas.DataFrame</code> of the aggregated participants from all the given queries.</p> <code>save_csv</code> <p>Saves the aggregated participants DataFrame to a CSV file.</p> <code>save_excel</code> <p>Saves the aggregated participants DataFrame to an Excel file.</p> Source code in <code>egytech_api/core.py</code> <pre><code>class AsyncPoolingClient(BaseModel):\n    \"\"\"Class for asynchronously pooling multiple API calls with different query parameters into one object.\n\n    Attributes\n    ----------\n    queries : list of `ParticipantsQueryParams`\n        The list of query parameters for the participants endpoint.\n    _dataframe : pd.DataFrame\n        The resulting pandas.DataFrame of the participants from the API Call.\n\n    Methods\n    -------\n    get_df()\n        Returns the `pandas.DataFrame` of the aggregated participants from all the given queries.\n    save_csv(filename: str = \"pooled_async_participants_results\")\n        Saves the aggregated participants DataFrame to a CSV file.\n    save_excel(filename: str = \"pooled_async_participants_results\")\n        Saves the aggregated participants DataFrame to an Excel file.\n\n    \"\"\"\n\n    model_config = ConfigDict(arbitrary_types_allowed=True, extra=\"forbid\")\n    queries: list[ParticipantsQueryParams] = Field(exclude=True)\n    _dataframe: Optional[pd.DataFrame] = None\n\n    def model_post_init(self, __context: Any) -&gt; None:\n        \"\"\"Placeholder that calls make_calls() after initialization of the proper pydantic model for the\n        available query parameters correctly.\n\n        Parameters\n        ----------\n        __context : Any\n\n        Returns\n        -------\n        None\n\n        \"\"\"\n        asyncio.run(self.make_calls())\n\n    async def make_calls(self) -&gt; None:\n        \"\"\"Asynchronously Executes the API calls with the given query parameters.\n\n        Returns\n        -------\n        None\n\n        \"\"\"\n\n        async def make_single_call(\n                query: ParticipantsQueryParams, c: httpx.AsyncClient\n        ) -&gt; list[Dict[str, Any]]:\n            response = await c.get(\n                \"participants\",\n                params=query.model_dump(mode=\"json\", exclude_none=True),\n            )\n            if response.status_code != 200:\n                raise Exception(\"Unsuccessful API Call\")\n            return response.json()[\"results\"]\n\n        headers = {\"accept\": \"application/json\"}\n        client = httpx.AsyncClient(\n            base_url=\"https://api.egytech.fyi/\", headers=headers\n        )\n        responses = await asyncio.gather(\n            *map(make_single_call, self.queries, itertools.repeat(client))\n        )\n        results = itertools.chain(*responses)\n        await client.aclose()\n\n        self._dataframe = pd.DataFrame.from_records(results)\n\n    def get_df(self) -&gt; pd.DataFrame:\n        \"\"\"Returns the pandas.DataFrame of the aggregated participants from all the given queries.\n\n        Returns\n        -------\n        pd.DataFrame\n\n        \"\"\"\n        return self._dataframe\n\n    def save_csv(self, filename: str) -&gt; None:\n        \"\"\"Saves the aggregated participants DataFrame to a CSV file.\n\n        Parameters\n        ----------\n        filename : str = \"pooled_async_participants_results\"\n            The filename to save the CSV file to. This should not include the file extension.\n            Example: \"participants\" would lead to a file named \"participants.csv\".\n\n        Returns\n        -------\n        None\n\n        \"\"\"\n        self._dataframe.to_csv(filename + \".csv\", index=False)\n\n    def save_excel(self, filename: str) -&gt; None:\n        \"\"\"Saves the aggregated participants DataFrame to an Excel file.\n\n        Parameters\n        ----------\n        filename : str = \"pooled_async_participants_results\"\n            The filename to save the Excel file to. This should not include the file extension.\n            Example: \"participants\" would lead to a file named \"participants.xlsx\".\n\n        Returns\n        -------\n        None\n\n        \"\"\"\n        self._dataframe.to_excel(\n            filename + \".xlsx\", index=False, engine=\"xlsxwriter\"\n        )\n</code></pre>"},{"location":"classes/async-pooling-client/#egytech_api.core.AsyncPoolingClient.get_df","title":"<code>get_df()</code>","text":"<p>Returns the pandas.DataFrame of the aggregated participants from all the given queries.</p> <p>Returns:</p> Type Description <code>DataFrame</code> Source code in <code>egytech_api/core.py</code> <pre><code>def get_df(self) -&gt; pd.DataFrame:\n    \"\"\"Returns the pandas.DataFrame of the aggregated participants from all the given queries.\n\n    Returns\n    -------\n    pd.DataFrame\n\n    \"\"\"\n    return self._dataframe\n</code></pre>"},{"location":"classes/async-pooling-client/#egytech_api.core.AsyncPoolingClient.make_calls","title":"<code>make_calls()</code>  <code>async</code>","text":"<p>Asynchronously Executes the API calls with the given query parameters.</p> <p>Returns:</p> Type Description <code>None</code> Source code in <code>egytech_api/core.py</code> <pre><code>async def make_calls(self) -&gt; None:\n    \"\"\"Asynchronously Executes the API calls with the given query parameters.\n\n    Returns\n    -------\n    None\n\n    \"\"\"\n\n    async def make_single_call(\n            query: ParticipantsQueryParams, c: httpx.AsyncClient\n    ) -&gt; list[Dict[str, Any]]:\n        response = await c.get(\n            \"participants\",\n            params=query.model_dump(mode=\"json\", exclude_none=True),\n        )\n        if response.status_code != 200:\n            raise Exception(\"Unsuccessful API Call\")\n        return response.json()[\"results\"]\n\n    headers = {\"accept\": \"application/json\"}\n    client = httpx.AsyncClient(\n        base_url=\"https://api.egytech.fyi/\", headers=headers\n    )\n    responses = await asyncio.gather(\n        *map(make_single_call, self.queries, itertools.repeat(client))\n    )\n    results = itertools.chain(*responses)\n    await client.aclose()\n\n    self._dataframe = pd.DataFrame.from_records(results)\n</code></pre>"},{"location":"classes/async-pooling-client/#egytech_api.core.AsyncPoolingClient.model_post_init","title":"<code>model_post_init(__context)</code>","text":"<p>Placeholder that calls make_calls() after initialization of the proper pydantic model for the available query parameters correctly.</p> <p>Parameters:</p> Name Type Description Default <code>__context</code> <code>Any</code> required <p>Returns:</p> Type Description <code>None</code> Source code in <code>egytech_api/core.py</code> <pre><code>def model_post_init(self, __context: Any) -&gt; None:\n    \"\"\"Placeholder that calls make_calls() after initialization of the proper pydantic model for the\n    available query parameters correctly.\n\n    Parameters\n    ----------\n    __context : Any\n\n    Returns\n    -------\n    None\n\n    \"\"\"\n    asyncio.run(self.make_calls())\n</code></pre>"},{"location":"classes/async-pooling-client/#egytech_api.core.AsyncPoolingClient.save_csv","title":"<code>save_csv(filename)</code>","text":"<p>Saves the aggregated participants DataFrame to a CSV file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str = \"pooled_async_participants_results\"</code> <p>The filename to save the CSV file to. This should not include the file extension. Example: \"participants\" would lead to a file named \"participants.csv\".</p> required <p>Returns:</p> Type Description <code>None</code> Source code in <code>egytech_api/core.py</code> <pre><code>def save_csv(self, filename: str) -&gt; None:\n    \"\"\"Saves the aggregated participants DataFrame to a CSV file.\n\n    Parameters\n    ----------\n    filename : str = \"pooled_async_participants_results\"\n        The filename to save the CSV file to. This should not include the file extension.\n        Example: \"participants\" would lead to a file named \"participants.csv\".\n\n    Returns\n    -------\n    None\n\n    \"\"\"\n    self._dataframe.to_csv(filename + \".csv\", index=False)\n</code></pre>"},{"location":"classes/async-pooling-client/#egytech_api.core.AsyncPoolingClient.save_excel","title":"<code>save_excel(filename)</code>","text":"<p>Saves the aggregated participants DataFrame to an Excel file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str = \"pooled_async_participants_results\"</code> <p>The filename to save the Excel file to. This should not include the file extension. Example: \"participants\" would lead to a file named \"participants.xlsx\".</p> required <p>Returns:</p> Type Description <code>None</code> Source code in <code>egytech_api/core.py</code> <pre><code>def save_excel(self, filename: str) -&gt; None:\n    \"\"\"Saves the aggregated participants DataFrame to an Excel file.\n\n    Parameters\n    ----------\n    filename : str = \"pooled_async_participants_results\"\n        The filename to save the Excel file to. This should not include the file extension.\n        Example: \"participants\" would lead to a file named \"participants.xlsx\".\n\n    Returns\n    -------\n    None\n\n    \"\"\"\n    self._dataframe.to_excel(\n        filename + \".xlsx\", index=False, engine=\"xlsxwriter\"\n    )\n</code></pre>"},{"location":"classes/participants-query-params/","title":"ParticipantsQueryParams","text":"<p>               Bases: <code>BaseModel</code></p> <p>Model for the query parameters of the participants endpoint of the API.</p> <p>Attributes:</p> Name Type Description <code>title</code> <code>{None, ai_automation, backend, crm, data_analytics, data_engineer, data_scientist, devops_sre_platform, embedded, engineering_manager, executive, frontend, fullstack, hardware, mobile, product_manager, product_owner, research, scrum, security, system_arch, technical_support, testing, ui_ux}</code> <p>The job title of the participants.</p> <code>level</code> <code>{None, c_level, director, group_product_manager, intern, junior, manager, mid_level, principal, senior, senior_manager, senior_principal, senior_staff, staff, team_lead, vp}</code> <p>The job level of the participants.</p> <code>min_yoe</code> <code>(int, optional)</code> <p>The minimum years of experience of the participants, must be greater than 0 and lower than 20.</p> <code>max_yoe</code> <code>(int, optional)</code> <p>The maximum years of experience of the participants, must be greater than 1 and lower than 26.</p> <code>gender</code> <code>{None, male, female}</code> <p>The gender of the participants.</p> <code>cs_degree</code> <code>(bool, optional)</code> <p>Whether the participants have a computer science degree.</p> <code>business_market</code> <code>{None, 'global', regional, local}</code> <p>The market scope of the business of the participants.</p> <code>business_size</code> <code>{None, small, medium, large}</code> <p>The size of the business of the participants.</p> <code>business_focus</code> <code>{None, product, software_house}</code> <p>The focus of the business of the participants.</p> <code>business_line</code> <code>{None, b2b, b2c, both}</code> <p>The line of business of the participants.</p> <code>include_relocated</code> <code>(bool, optional)</code> <p>Whether to include participants who have relocated.</p> <code>include_remote_abroad</code> <code>(bool, optional)</code> <p>Whether to include participants who are work remotely for companies abroad.</p> Source code in <code>egytech_api/models.py</code> <pre><code>class ParticipantsQueryParams(BaseModel):\n    \"\"\"Model for the query parameters of the participants endpoint of the API.\n\n    Attributes\n    ----------\n    title : {None, 'ai_automation', 'backend', 'crm', 'data_analytics', 'data_engineer', 'data_scientist',\\\n    'devops_sre_platform', 'embedded', 'engineering_manager', 'executive', 'frontend', 'fullstack', 'hardware',\\\n    'mobile', 'product_manager', 'product_owner', 'research', 'scrum', 'security', 'system_arch', 'technical_support',\\\n    'testing', 'ui_ux'}\n        The job title of the participants.\n    level : {None, 'c_level', 'director', 'group_product_manager', 'intern', 'junior', 'manager', 'mid_level',\\\n    'principal', 'senior', 'senior_manager', 'senior_principal', 'senior_staff', 'staff', 'team_lead', 'vp'}\n        The job level of the participants.\n    min_yoe : int, optional\n        The minimum years of experience of the participants, must be greater than 0 and lower than 20.\n    max_yoe : int, optional\n        The maximum years of experience of the participants, must be greater than 1 and lower than 26.\n    gender : {None, 'male', 'female'}\n        The gender of the participants.\n    cs_degree : bool, optional\n        Whether the participants have a computer science degree.\n    business_market : {None, 'global', 'regional', 'local'}\n        The market scope of the business of the participants.\n    business_size : {None, 'small', 'medium', 'large'}\n        The size of the business of the participants.\n    business_focus : {None, 'product', 'software_house'}\n        The focus of the business of the participants.\n    business_line : {None, 'b2b', 'b2c', 'both'}\n        The line of business of the participants.\n    include_relocated : bool, optional\n        Whether to include participants who have relocated.\n    include_remote_abroad : bool, optional\n        Whether to include participants who are work remotely for companies abroad.\n\n    \"\"\"\n\n    model_config = ConfigDict(extra=\"forbid\")\n    title: Optional[TitleEnum] = None\n    level: Optional[LevelEnum] = None\n    min_yoe: Optional[conint(strict=True, ge=0, le=20)] = Field(\n        default=None, serialization_alias=\"yoe_from_included\"\n    )\n    max_yoe: Optional[conint(strict=True, ge=1, le=26)] = Field(\n        default=None, serialization_alias=\"yoe_to_excluded\"\n    )\n    gender: Optional[GenderEnum] = None\n    cs_degree: Optional[DegreeType] = None\n    business_market: Optional[BusinessMarketEnum] = None\n    business_size: Optional[BusinessSizeEnum] = None\n    business_focus: Optional[BusinessFocusEnum] = None\n    business_line: Optional[BusinessLineEnum] = None\n    include_relocated: Optional[IncludeType] = None\n    include_remote_abroad: Optional[IncludeType] = None\n</code></pre>"},{"location":"classes/participants/","title":"Participants","text":"<p>               Bases: <code>ParticipantsQueryParams</code></p> <p>Class that acts as a client for retrieval of participants from the API with the given query parameters.</p> <p>Attributes:</p> Name Type Description <code>title</code> <code>{None, ai_automation, backend, crm, data_analytics, data_engineer, data_scientist, devops_sre_platform, embedded, engineering_manager, executive, frontend, fullstack, hardware, mobile, product_manager, product_owner, research, scrum, security, system_arch, technical_support, testing, ui_ux}</code> <p>The job title of the participants.</p> <code>level</code> <code>{None, c_level, director, group_product_manager, intern, junior, manager, mid_level, principal, senior, senior_manager, senior_principal, senior_staff, staff, team_lead, vp}</code> <p>The job level of the participants.</p> <code>min_yoe</code> <code>(int, optional)</code> <p>The minimum years of experience of the participants, must be greater than 0 and lower than 20.</p> <code>max_yoe</code> <code>(int, optional)</code> <p>The maximum years of experience of the participants, must be greater than 1 and lower than 26.</p> <code>gender</code> <code>{None, male, female}</code> <p>The gender of the participants.</p> <code>cs_degree</code> <code>(bool, optional)</code> <p>Whether the participants have a computer science degree.</p> <code>business_market</code> <code>{None, 'global', regional, local}</code> <p>The market scope of the business of the participants.</p> <code>business_size</code> <code>{None, small, medium, large}</code> <p>The size of the business of the participants.</p> <code>business_focus</code> <code>{None, product, software_house}</code> <p>The focus of the business of the participants.</p> <code>business_line</code> <code>{None, b2b, b2c, both}</code> <p>The line of business of the participants.</p> <code>include_relocated</code> <code>(bool, optional)</code> <p>Whether to include participants who have relocated.</p> <code>include_remote_abroad</code> <code>(bool, optional)</code> <p>Whether to include participants who are work remotely for companies abroad.</p> <code>_participants</code> <code>DataFrame</code> <p>This is where the pandas.DataFrame resulting from the API Call is stored. It can be accessed using by calling the get_df() method on your instance of the class.</p> <p>Methods:</p> Name Description <code>get_df</code> <p>Returns the pandas.DataFrame of the retrieved participants.</p> <code>save_csv</code> <p>Saves the participants DataFrame to a CSV file.</p> <code>save_excel</code> <p>Saves the participants DataFrame to an Excel file.</p> Source code in <code>egytech_api/core.py</code> <pre><code>class Participants(ParticipantsQueryParams):\n    \"\"\"Class that acts as a client for retrieval of participants from the API with the given query parameters.\n\n    Attributes\n    ----------\n    title : {None, 'ai_automation', 'backend', 'crm', 'data_analytics', 'data_engineer', 'data_scientist',\\\n    'devops_sre_platform', 'embedded', 'engineering_manager', 'executive', 'frontend', 'fullstack', 'hardware',\\\n    'mobile', 'product_manager', 'product_owner', 'research', 'scrum', 'security', 'system_arch', 'technical_support',\\\n    'testing', 'ui_ux'}\n        The job title of the participants.\n    level : {None, 'c_level', 'director', 'group_product_manager', 'intern', 'junior', 'manager', 'mid_level',\\\n    'principal', 'senior', 'senior_manager', 'senior_principal', 'senior_staff', 'staff', 'team_lead', 'vp'}\n        The job level of the participants.\n    min_yoe : int, optional\n        The minimum years of experience of the participants, must be greater than 0 and lower than 20.\n    max_yoe : int, optional\n        The maximum years of experience of the participants, must be greater than 1 and lower than 26.\n    gender : {None, 'male', 'female'}\n        The gender of the participants.\n    cs_degree : bool, optional\n        Whether the participants have a computer science degree.\n    business_market : {None, 'global', 'regional', 'local'}\n        The market scope of the business of the participants.\n    business_size : {None, 'small', 'medium', 'large'}\n        The size of the business of the participants.\n    business_focus : {None, 'product', 'software_house'}\n        The focus of the business of the participants.\n    business_line : {None, 'b2b', 'b2c', 'both'}\n        The line of business of the participants.\n    include_relocated : bool, optional\n        Whether to include participants who have relocated.\n    include_remote_abroad : bool, optional\n        Whether to include participants who are work remotely for companies abroad.\n    _participants : pd.DataFrame\n        This is where the pandas.DataFrame resulting from the API Call is stored. It can be accessed using by calling\n        the get_df() method on your instance of the class.\n\n    Methods\n    -------\n    get_df()\n        Returns the pandas.DataFrame of the retrieved participants.\n    save_csv(filename: str=\"participants\")\n        Saves the participants DataFrame to a CSV file.\n    save_excel(filename: str=\"participants\")\n        Saves the participants DataFrame to an Excel file.\n    \"\"\"\n\n    model_config = ConfigDict(\n        arbitrary_types_allowed=True, use_enum_values=True, extra=\"forbid\"\n    )\n    _participants: Optional[pd.DataFrame] = None\n\n    def model_post_init(self, __context: Any) -&gt; None:\n        \"\"\"\n        Placeholder that calls execute_call() on self with given query parameters after initialization of the pydantic\n        model for the available query parameters with the correct specification.\n\n        Parameters\n        ----------\n        __context : Any\n\n        Returns\n        -------\n        None\n        \"\"\"\n        self.execute_call()\n\n    def execute_call(self):\n        \"\"\"Executes the API call with the given query parameters during model initialization.\n\n        Returns\n        -------\n        None\n        \"\"\"\n        url = \"https://api.egytech.fyi/participants\"\n        headers = {\"accept\": \"application/json\"}\n\n        response = httpx.get(\n            url,\n            headers=headers,\n            params=self.model_dump(mode=\"json\", exclude_none=True),\n        )\n\n        if response.status_code != 200:\n            raise Exception(\"Unsuccessful API Call\")\n\n        participants_dict = response.json()[\"results\"]\n\n        self._participants = pd.DataFrame.from_records(participants_dict)\n\n    def get_df(self):\n        \"\"\"Returns the pandas.DataFrame of the participants.\n\n        Returns\n        -------\n        pd.DataFrame\n        \"\"\"\n        return self._participants\n\n    def save_csv(self, filename: str = \"participants\") -&gt; None:\n        \"\"\"Saves the participants DataFrame to a CSV file.\n\n        Parameters\n        ----------\n        filename : str\n            The filename to save the CSV file to. This should not include the file extension.\n            Example: \"participants\" would lead to a file named \"participants.csv\".\n\n        Returns\n        -------\n        None\n        \"\"\"\n        self._participants.to_csv(filename + \".csv\", index=False)\n\n    def save_excel(self, filename: str = \"participants\") -&gt; None:\n        \"\"\"Saves the participants DataFrame to an Excel file.\n\n        Parameters\n        ----------\n        filename : str\n            The filename to save the Excel file to. This should not include the file extension.\n            Example: \"participants\" would lead to a file named \"participants.xlsx\".\n\n        Returns\n        -------\n        None\n        \"\"\"\n        self._participants.to_excel(\n            filename + \".xlsx\", index=False, engine=\"xlsxwriter\"\n        )\n</code></pre>"},{"location":"classes/participants/#egytech_api.core.Participants.execute_call","title":"<code>execute_call()</code>","text":"<p>Executes the API call with the given query parameters during model initialization.</p> <p>Returns:</p> Type Description <code>None</code> Source code in <code>egytech_api/core.py</code> <pre><code>def execute_call(self):\n    \"\"\"Executes the API call with the given query parameters during model initialization.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    url = \"https://api.egytech.fyi/participants\"\n    headers = {\"accept\": \"application/json\"}\n\n    response = httpx.get(\n        url,\n        headers=headers,\n        params=self.model_dump(mode=\"json\", exclude_none=True),\n    )\n\n    if response.status_code != 200:\n        raise Exception(\"Unsuccessful API Call\")\n\n    participants_dict = response.json()[\"results\"]\n\n    self._participants = pd.DataFrame.from_records(participants_dict)\n</code></pre>"},{"location":"classes/participants/#egytech_api.core.Participants.get_df","title":"<code>get_df()</code>","text":"<p>Returns the pandas.DataFrame of the participants.</p> <p>Returns:</p> Type Description <code>DataFrame</code> Source code in <code>egytech_api/core.py</code> <pre><code>def get_df(self):\n    \"\"\"Returns the pandas.DataFrame of the participants.\n\n    Returns\n    -------\n    pd.DataFrame\n    \"\"\"\n    return self._participants\n</code></pre>"},{"location":"classes/participants/#egytech_api.core.Participants.model_post_init","title":"<code>model_post_init(__context)</code>","text":"<p>Placeholder that calls execute_call() on self with given query parameters after initialization of the pydantic model for the available query parameters with the correct specification.</p> <p>Parameters:</p> Name Type Description Default <code>__context</code> <code>Any</code> required <p>Returns:</p> Type Description <code>None</code> Source code in <code>egytech_api/core.py</code> <pre><code>def model_post_init(self, __context: Any) -&gt; None:\n    \"\"\"\n    Placeholder that calls execute_call() on self with given query parameters after initialization of the pydantic\n    model for the available query parameters with the correct specification.\n\n    Parameters\n    ----------\n    __context : Any\n\n    Returns\n    -------\n    None\n    \"\"\"\n    self.execute_call()\n</code></pre>"},{"location":"classes/participants/#egytech_api.core.Participants.save_csv","title":"<code>save_csv(filename='participants')</code>","text":"<p>Saves the participants DataFrame to a CSV file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>The filename to save the CSV file to. This should not include the file extension. Example: \"participants\" would lead to a file named \"participants.csv\".</p> <code>'participants'</code> <p>Returns:</p> Type Description <code>None</code> Source code in <code>egytech_api/core.py</code> <pre><code>def save_csv(self, filename: str = \"participants\") -&gt; None:\n    \"\"\"Saves the participants DataFrame to a CSV file.\n\n    Parameters\n    ----------\n    filename : str\n        The filename to save the CSV file to. This should not include the file extension.\n        Example: \"participants\" would lead to a file named \"participants.csv\".\n\n    Returns\n    -------\n    None\n    \"\"\"\n    self._participants.to_csv(filename + \".csv\", index=False)\n</code></pre>"},{"location":"classes/participants/#egytech_api.core.Participants.save_excel","title":"<code>save_excel(filename='participants')</code>","text":"<p>Saves the participants DataFrame to an Excel file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>The filename to save the Excel file to. This should not include the file extension. Example: \"participants\" would lead to a file named \"participants.xlsx\".</p> <code>'participants'</code> <p>Returns:</p> Type Description <code>None</code> Source code in <code>egytech_api/core.py</code> <pre><code>def save_excel(self, filename: str = \"participants\") -&gt; None:\n    \"\"\"Saves the participants DataFrame to an Excel file.\n\n    Parameters\n    ----------\n    filename : str\n        The filename to save the Excel file to. This should not include the file extension.\n        Example: \"participants\" would lead to a file named \"participants.xlsx\".\n\n    Returns\n    -------\n    None\n    \"\"\"\n    self._participants.to_excel(\n        filename + \".xlsx\", index=False, engine=\"xlsxwriter\"\n    )\n</code></pre>"},{"location":"classes/pooling-client/","title":"PoolingClient","text":"<p>               Bases: <code>BaseModel</code></p> <p>Class for pooling multiple API calls with different query parameters into one object.</p> <p>Attributes:</p> Name Type Description <code>queries</code> <code>list of `ParticipantsQueryParams`</code> <p>The list of query parameters for the participants endpoint.</p> <code>_dataframe</code> <code>DataFrame</code> <p>The resulting pandas.DataFrame of the participants from the API Call. This can be accessed by calling the get_df() method on your instance of the class.</p> <p>Methods:</p> Name Description <code>get_df</code> <p>Returns the pandas.DataFrame of the aggregated participants from all the given queries.</p> <code>save_csv</code> <p>Saves the aggregated participants DataFrame to a CSV file.</p> <code>save_excel</code> <p>Saves the aggregated participants DataFrame to an Excel file.</p> Source code in <code>egytech_api/core.py</code> <pre><code>class PoolingClient(BaseModel):\n    \"\"\"Class for pooling multiple API calls with different query parameters into one object.\n\n    Attributes\n    ----------\n    queries : list of `ParticipantsQueryParams`\n        The list of query parameters for the participants endpoint.\n    _dataframe : pd.DataFrame\n        The resulting pandas.DataFrame of the participants from the API Call. This can be accessed by calling the\n        get_df() method on your instance of the class.\n\n    Methods\n    -------\n    get_df()\n        Returns the pandas.DataFrame of the aggregated participants from all the given queries.\n    save_csv(filename: str=\"pooled_participants_results\")\n        Saves the aggregated participants DataFrame to a CSV file.\n    save_excel(filename: str=\"pooled_participants_results\")\n        Saves the aggregated participants DataFrame to an Excel file.\n\n    \"\"\"\n\n    model_config = ConfigDict(arbitrary_types_allowed=True, extra=\"forbid\")\n    queries: list[ParticipantsQueryParams] = Field(exclude=True)\n    _dataframe: Optional[pd.DataFrame] = None\n\n    def model_post_init(self, __context: Any) -&gt; None:\n        \"\"\"Placeholder that calls make_calls() after initialization of the proper pydantic model for the\n        available query parameters correctly.\n\n        Parameters\n        ----------\n        __context : Any\n\n        Returns\n        -------\n        None\n\n        \"\"\"\n        self.make_calls()\n\n    def make_calls(self) -&gt; None:\n        \"\"\"Executes the API calls with the given query parameters.\n\n        Returns\n        -------\n        None\n\n        \"\"\"\n        url = \"https://api.egytech.fyi/\"\n        headers = {\"accept\": \"application/json\"}\n\n        with httpx.Client(base_url=url) as client:\n            responses = []\n            for query in self.queries:\n                response = client.get(\n                    \"participants\",\n                    headers=headers,\n                    params=query.model_dump(\n                        mode=\"json\", exclude_none=True\n                    ),\n                )\n\n                if response.status_code != 200:\n                    raise Exception(\"Unsuccessful API Call\")\n\n                deser_response = response.json()\n                responses.extend(list(deser_response.values())[-1])\n\n        self._dataframe = pd.DataFrame.from_records(responses)\n\n    def get_df(self) -&gt; pd.DataFrame:\n        \"\"\"Returns the pandas.DataFrame of the aggregated participants from all the given queries.\n\n        Returns\n        -------\n        pd.DataFrame\n\n        \"\"\"\n        return self._dataframe\n\n    def save_csv(\n            self, filename: str = \"pooled_participants_results\"\n    ) -&gt; None:\n        \"\"\"Saves the aggregated participants DataFrame to a CSV file.\n\n        Parameters\n        ----------\n        filename : str = \"pooled_participants_results\"\n            The filename to save the CSV file to. This should not include the file extension.\n            Example: \"participants\" would lead to a file named \"participants.csv\".\n\n        Returns\n        -------\n        None\n\n        \"\"\"\n        self._dataframe.to_csv(filename + \".csv\", index=False)\n\n    def save_excel(\n            self, filename: str = \"pooled_participants_results\"\n    ) -&gt; None:\n        \"\"\"Saves the aggregated participants DataFrame to an Excel file.\n\n        Parameters\n        ----------\n        filename : str = \"pooled_participants_results\"\n            The filename to save the Excel file to. This should not include the file extension.\n            Example: \"participants\" would lead to a file named \"participants.xlsx\".\n\n        Returns\n        -------\n        None\n\n        \"\"\"\n        self._dataframe.to_excel(\n            filename + \".xlsx\", index=False, engine=\"xlsxwriter\"\n        )\n</code></pre>"},{"location":"classes/pooling-client/#egytech_api.core.PoolingClient.get_df","title":"<code>get_df()</code>","text":"<p>Returns the pandas.DataFrame of the aggregated participants from all the given queries.</p> <p>Returns:</p> Type Description <code>DataFrame</code> Source code in <code>egytech_api/core.py</code> <pre><code>def get_df(self) -&gt; pd.DataFrame:\n    \"\"\"Returns the pandas.DataFrame of the aggregated participants from all the given queries.\n\n    Returns\n    -------\n    pd.DataFrame\n\n    \"\"\"\n    return self._dataframe\n</code></pre>"},{"location":"classes/pooling-client/#egytech_api.core.PoolingClient.make_calls","title":"<code>make_calls()</code>","text":"<p>Executes the API calls with the given query parameters.</p> <p>Returns:</p> Type Description <code>None</code> Source code in <code>egytech_api/core.py</code> <pre><code>def make_calls(self) -&gt; None:\n    \"\"\"Executes the API calls with the given query parameters.\n\n    Returns\n    -------\n    None\n\n    \"\"\"\n    url = \"https://api.egytech.fyi/\"\n    headers = {\"accept\": \"application/json\"}\n\n    with httpx.Client(base_url=url) as client:\n        responses = []\n        for query in self.queries:\n            response = client.get(\n                \"participants\",\n                headers=headers,\n                params=query.model_dump(\n                    mode=\"json\", exclude_none=True\n                ),\n            )\n\n            if response.status_code != 200:\n                raise Exception(\"Unsuccessful API Call\")\n\n            deser_response = response.json()\n            responses.extend(list(deser_response.values())[-1])\n\n    self._dataframe = pd.DataFrame.from_records(responses)\n</code></pre>"},{"location":"classes/pooling-client/#egytech_api.core.PoolingClient.model_post_init","title":"<code>model_post_init(__context)</code>","text":"<p>Placeholder that calls make_calls() after initialization of the proper pydantic model for the available query parameters correctly.</p> <p>Parameters:</p> Name Type Description Default <code>__context</code> <code>Any</code> required <p>Returns:</p> Type Description <code>None</code> Source code in <code>egytech_api/core.py</code> <pre><code>def model_post_init(self, __context: Any) -&gt; None:\n    \"\"\"Placeholder that calls make_calls() after initialization of the proper pydantic model for the\n    available query parameters correctly.\n\n    Parameters\n    ----------\n    __context : Any\n\n    Returns\n    -------\n    None\n\n    \"\"\"\n    self.make_calls()\n</code></pre>"},{"location":"classes/pooling-client/#egytech_api.core.PoolingClient.save_csv","title":"<code>save_csv(filename='pooled_participants_results')</code>","text":"<p>Saves the aggregated participants DataFrame to a CSV file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str = \"pooled_participants_results\"</code> <p>The filename to save the CSV file to. This should not include the file extension. Example: \"participants\" would lead to a file named \"participants.csv\".</p> <code>'pooled_participants_results'</code> <p>Returns:</p> Type Description <code>None</code> Source code in <code>egytech_api/core.py</code> <pre><code>def save_csv(\n        self, filename: str = \"pooled_participants_results\"\n) -&gt; None:\n    \"\"\"Saves the aggregated participants DataFrame to a CSV file.\n\n    Parameters\n    ----------\n    filename : str = \"pooled_participants_results\"\n        The filename to save the CSV file to. This should not include the file extension.\n        Example: \"participants\" would lead to a file named \"participants.csv\".\n\n    Returns\n    -------\n    None\n\n    \"\"\"\n    self._dataframe.to_csv(filename + \".csv\", index=False)\n</code></pre>"},{"location":"classes/pooling-client/#egytech_api.core.PoolingClient.save_excel","title":"<code>save_excel(filename='pooled_participants_results')</code>","text":"<p>Saves the aggregated participants DataFrame to an Excel file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str = \"pooled_participants_results\"</code> <p>The filename to save the Excel file to. This should not include the file extension. Example: \"participants\" would lead to a file named \"participants.xlsx\".</p> <code>'pooled_participants_results'</code> <p>Returns:</p> Type Description <code>None</code> Source code in <code>egytech_api/core.py</code> <pre><code>def save_excel(\n        self, filename: str = \"pooled_participants_results\"\n) -&gt; None:\n    \"\"\"Saves the aggregated participants DataFrame to an Excel file.\n\n    Parameters\n    ----------\n    filename : str = \"pooled_participants_results\"\n        The filename to save the Excel file to. This should not include the file extension.\n        Example: \"participants\" would lead to a file named \"participants.xlsx\".\n\n    Returns\n    -------\n    None\n\n    \"\"\"\n    self._dataframe.to_excel(\n        filename + \".xlsx\", index=False, engine=\"xlsxwriter\"\n    )\n</code></pre>"},{"location":"classes/stats-query-params/","title":"StatsQueryParams","text":"<p>               Bases: <code>ParticipantsQueryParams</code></p> <p>Model for the query parameters of the stats endpoint of the API.</p> <p>Attributes:</p> Name Type Description <code>title</code> <code>{None, ai_automation, backend, crm, data_analytics, data_engineer, data_scientist, devops_sre_platform, embedded, engineering_manager, executive, frontend, fullstack, hardware, mobile, product_manager, product_owner, research, scrum, security, system_arch, technical_support, testing, ui_ux}</code> <p>The job title of the participants.</p> <code>level</code> <code>{None, c_level, director, group_product_manager, intern, junior, manager, mid_level, principal, senior, senior_manager, senior_principal, senior_staff, staff, team_lead, vp}</code> <p>The job level of the participants.</p> <code>min_yoe</code> <code>(int, optional)</code> <p>The minimum years of experience of the participants, must be greater than 0 and lower than 20.</p> <code>max_yoe</code> <code>(int, optional)</code> <p>The maximum years of experience of the participants, must be greater than 1 and lower than 26.</p> <code>gender</code> <code>{None, male, female}</code> <p>The gender of the participants.</p> <code>cs_degree</code> <code>(bool, optional)</code> <p>Whether the participants have a computer science degree.</p> <code>business_market</code> <code>{None, 'global', regional, local}</code> <p>The market scope of the business of the participants.</p> <code>business_size</code> <code>{None, small, medium, large}</code> <p>The size of the business of the participants.</p> <code>business_focus</code> <code>{None, product, software_house}</code> <p>The focus of the business of the participants.</p> <code>business_line</code> <code>{None, b2b, b2c, both}</code> <p>The line of business of the participants.</p> <code>include_relocated</code> <code>(bool, optional)</code> <p>Whether to include participants who have relocated.</p> <code>include_remote_abroad</code> <code>(bool, optional)</code> <p>Whether to include participants who are work remotely for companies abroad.</p> <code>programming_language</code> <code>{None, java_script, type_script, python, c_sharp, java, php, c_cplusplus, kotlin, swift, dart, go, r, scala, rust}</code> <p>The programming language of the participants.</p> Source code in <code>egytech_api/models.py</code> <pre><code>class StatsQueryParams(ParticipantsQueryParams):\n    \"\"\"Model for the query parameters of the stats endpoint of the API.\n\n    Attributes\n    ----------\n    title : {None, 'ai_automation', 'backend', 'crm', 'data_analytics', 'data_engineer', 'data_scientist',\\\n    'devops_sre_platform', 'embedded', 'engineering_manager', 'executive', 'frontend', 'fullstack', 'hardware',\\\n    'mobile', 'product_manager', 'product_owner', 'research', 'scrum', 'security', 'system_arch', 'technical_support',\\\n    'testing', 'ui_ux'}\n        The job title of the participants.\n    level : {None, 'c_level', 'director', 'group_product_manager', 'intern', 'junior', 'manager', 'mid_level',\\\n    'principal', 'senior', 'senior_manager', 'senior_principal', 'senior_staff', 'staff', 'team_lead', 'vp'}\n        The job level of the participants.\n    min_yoe : int, optional\n        The minimum years of experience of the participants, must be greater than 0 and lower than 20.\n    max_yoe : int, optional\n        The maximum years of experience of the participants, must be greater than 1 and lower than 26.\n    gender : {None, 'male', 'female'}\n        The gender of the participants.\n    cs_degree : bool, optional\n        Whether the participants have a computer science degree.\n    business_market : {None, 'global', 'regional', 'local'}\n        The market scope of the business of the participants.\n    business_size : {None, 'small', 'medium', 'large'}\n        The size of the business of the participants.\n    business_focus : {None, 'product', 'software_house'}\n        The focus of the business of the participants.\n    business_line : {None, 'b2b', 'b2c', 'both'}\n        The line of business of the participants.\n    include_relocated : bool, optional\n        Whether to include participants who have relocated.\n    include_remote_abroad : bool, optional\n        Whether to include participants who are work remotely for companies abroad.\n\n    programming_language : {None, 'java_script', 'type_script', 'python', 'c_sharp', 'java', 'php', 'c_cplusplus',\\\n    'kotlin', 'swift', 'dart', 'go', 'r', 'scala', 'rust'}\n        The programming language of the participants.\n\n    \"\"\"\n\n    model_config = ConfigDict(extra=\"forbid\")\n\n    programming_language: Optional[ProgrammingLanguageEnum] = None\n</code></pre>"},{"location":"classes/stats/","title":"Stats","text":"<p>               Bases: <code>StatsQueryParams</code></p> <p>Class for retrieval of statistics from the API with the given query parameters.</p> <p>Attributes:</p> Name Type Description <code>title</code> <code>{None, ai_automation, backend, crm, data_analytics, data_engineer, data_scientist, devops_sre_platform, embedded, engineering_manager, executive, frontend, fullstack, hardware, mobile, product_manager, product_owner, research, scrum, security, system_arch, technical_support, testing, ui_ux}</code> <p>The job title of the participants.</p> <code>level</code> <code>{None, c_level, director, group_product_manager, intern, junior, manager, mid_level, principal, senior, senior_manager, senior_principal, senior_staff, staff, team_lead, vp}</code> <p>The job level of the participants.</p> <code>min_yoe</code> <code>(int, optional)</code> <p>The minimum years of experience of the participants, must be greater than 0 and lower than 20.</p> <code>max_yoe</code> <code>(int, optional)</code> <p>The maximum years of experience of the participants, must be greater than 1 and lower than 26.</p> <code>gender</code> <code>{None, male, female}</code> <p>The gender of the participants.</p> <code>cs_degree</code> <code>(bool, optional)</code> <p>Whether the participants have a computer science degree.</p> <code>business_market</code> <code>{None, 'global', regional, local}</code> <p>The market scope of the business of the participants.</p> <code>business_size</code> <code>{None, small, medium, large}</code> <p>The size of the business of the participants.</p> <code>business_focus</code> <code>{None, product, software_house}</code> <p>The focus of the business of the participants.</p> <code>business_line</code> <code>{None, b2b, b2c, both}</code> <p>The line of business of the participants.</p> <code>include_relocated</code> <code>(bool, optional)</code> <p>Whether to include participants who have relocated.</p> <code>include_remote_abroad</code> <code>(bool, optional)</code> <p>Whether to include participants who are work remotely for companies abroad.</p> <code>programming_language</code> <code>{None, java_script, type_script, python, c_sharp, java, php, c_cplusplus, kotlin, swift, dart, go, r, scala, rust}</code> <p>The programming language of the participants.</p> <code>_stats</code> <code>Dict[str, str]</code> <p>The dictionary of statistics retrieved from the API Call. This can be accessed by calling the get_stats() method on your instance of the class.</p> <code>_buckets</code> <code>DataFrame</code> <p>The buckets of compensation of retrieved participants. This can be accessed by calling the get_df() method on your instance of the class.</p> <p>Methods:</p> Name Description <code>get_stats</code> <p>Returns the statistics from the API Call.</p> <code>get_df</code> <p>Returns the pandas.DataFrame of the buckets.</p> <code>save_csv</code> <p>Saves the buckets DataFrame to a CSV file.</p> <code>save_excel</code> <p>Saves the buckets DataFrame to an Excel file.</p> Source code in <code>egytech_api/core.py</code> <pre><code>class Stats(StatsQueryParams):\n    \"\"\"Class for retrieval of statistics from the API with the given query parameters.\n\n    Attributes\n    ----------\n    title : {None, 'ai_automation', 'backend', 'crm', 'data_analytics', 'data_engineer', 'data_scientist',\\\n    'devops_sre_platform', 'embedded', 'engineering_manager', 'executive', 'frontend', 'fullstack', 'hardware',\\\n    'mobile', 'product_manager', 'product_owner', 'research', 'scrum', 'security', 'system_arch', 'technical_support',\\\n    'testing', 'ui_ux'}\n        The job title of the participants.\n    level : {None, 'c_level', 'director', 'group_product_manager', 'intern', 'junior', 'manager', 'mid_level',\\\n    'principal', 'senior', 'senior_manager', 'senior_principal', 'senior_staff', 'staff', 'team_lead', 'vp'}\n        The job level of the participants.\n    min_yoe : int, optional\n        The minimum years of experience of the participants, must be greater than 0 and lower than 20.\n    max_yoe : int, optional\n        The maximum years of experience of the participants, must be greater than 1 and lower than 26.\n    gender : {None, 'male', 'female'}\n        The gender of the participants.\n    cs_degree : bool, optional\n        Whether the participants have a computer science degree.\n    business_market : {None, 'global', 'regional', 'local'}\n        The market scope of the business of the participants.\n    business_size : {None, 'small', 'medium', 'large'}\n        The size of the business of the participants.\n    business_focus : {None, 'product', 'software_house'}\n        The focus of the business of the participants.\n    business_line : {None, 'b2b', 'b2c', 'both'}\n        The line of business of the participants.\n    include_relocated : bool, optional\n        Whether to include participants who have relocated.\n    include_remote_abroad : bool, optional\n        Whether to include participants who are work remotely for companies abroad.\n    programming_language : {None, 'java_script', 'type_script', 'python', 'c_sharp', 'java', 'php', 'c_cplusplus',\\\n    'kotlin', 'swift', 'dart', 'go', 'r', 'scala', 'rust'}\n        The programming language of the participants.\n    _stats : Dict[str, str]\n        The dictionary of statistics retrieved from the API Call. This can be accessed by calling the get_stats() method\n        on your instance of the class.\n    _buckets : pd.DataFrame\n        The buckets of compensation of retrieved participants. This can be accessed by calling the get_df() method on\n        your instance of the class.\n\n    Methods\n    -------\n    get_stats()\n        Returns the statistics from the API Call.\n    get_df()\n        Returns the pandas.DataFrame of the buckets.\n    save_csv(filename: str=\"buckets\")\n        Saves the buckets DataFrame to a CSV file.\n    save_excel(filename: str=\"buckets\")\n        Saves the buckets DataFrame to an Excel file.\n    \"\"\"\n\n    model_config = ConfigDict(\n        arbitrary_types_allowed=True, use_enum_values=True, extra=\"forbid\"\n    )\n    _stats: Optional[Dict[str, str]] = None\n    _buckets: Optional[pd.DataFrame] = None\n\n    def model_post_init(self, __context: Any) -&gt; None:\n        \"\"\"Placeholder that calls execute_call() on self with given query parameters after initialization of the\n        pydantic model for the available query parameters with the correct specification.\n\n        Parameters\n        ----------\n        __context : Any\n\n        Returns\n        -------\n        None\n\n        \"\"\"\n        self.execute_call()\n\n    def execute_call(self) -&gt; None:\n        \"\"\"Executes the API call with the given query parameters during model initialization.\n\n        Returns\n        -------\n        None\n\n        \"\"\"\n        url = \"https://api.egytech.fyi/stats\"\n        headers = {\"accept\": \"application/json\"}\n\n        response = httpx.get(\n            url,\n            headers=headers,\n            params=self.model_dump(mode=\"json\", exclude_none=True),\n        )\n\n        if response.status_code != 200:\n            raise Exception(\"Unsuccessful API Call\")\n\n        deser_response = response.json()\n\n        self._buckets = pd.DataFrame.from_records(\n            deser_response[\"buckets\"]\n        )\n        self._stats = deser_response[\"stats\"]\n\n    def get_stats(self) -&gt; Dict[str, str]:\n        \"\"\"Returns the statistics from the API Call.\n\n        Returns\n        -------\n        Dict[str, str]\n\n        \"\"\"\n        return self._stats\n\n    def get_df(self) -&gt; pd.DataFrame:\n        \"\"\"Returns the pandas.DataFrame of the buckets.\n\n        Returns\n        -------\n        pd.DataFrame\n\n        \"\"\"\n        return self._buckets\n\n    def save_csv(self, filename: str) -&gt; None:\n        \"\"\"Saves the buckets DataFrame to a CSV file.\n\n        Parameters\n        ----------\n        filename : str\n            The filename to save the CSV file to. This should not include the file extension.\n            Example: \"buckets\" would lead to a file named \"buckets.csv\".\n\n        Returns\n        -------\n        None\n\n        \"\"\"\n        self._buckets.to_csv(filename + \".csv\", index=False)\n\n    def save_excel(self, filename: str) -&gt; None:\n        \"\"\"Saves the buckets DataFrame to an Excel file.\n\n        Parameters\n        ----------\n        filename : str\n            The filename to save the Excel file to. This should not include the file extension.\n            Example: \"buckets\" would lead to a file named \"buckets.xlsx\".\n\n        Returns\n        -------\n        None\n\n        \"\"\"\n        self._buckets.to_excel(\n            filename + \".xlsx\", index=False, engine=\"xlsxwriter\"\n        )\n</code></pre>"},{"location":"classes/stats/#egytech_api.core.Stats.execute_call","title":"<code>execute_call()</code>","text":"<p>Executes the API call with the given query parameters during model initialization.</p> <p>Returns:</p> Type Description <code>None</code> Source code in <code>egytech_api/core.py</code> <pre><code>def execute_call(self) -&gt; None:\n    \"\"\"Executes the API call with the given query parameters during model initialization.\n\n    Returns\n    -------\n    None\n\n    \"\"\"\n    url = \"https://api.egytech.fyi/stats\"\n    headers = {\"accept\": \"application/json\"}\n\n    response = httpx.get(\n        url,\n        headers=headers,\n        params=self.model_dump(mode=\"json\", exclude_none=True),\n    )\n\n    if response.status_code != 200:\n        raise Exception(\"Unsuccessful API Call\")\n\n    deser_response = response.json()\n\n    self._buckets = pd.DataFrame.from_records(\n        deser_response[\"buckets\"]\n    )\n    self._stats = deser_response[\"stats\"]\n</code></pre>"},{"location":"classes/stats/#egytech_api.core.Stats.get_df","title":"<code>get_df()</code>","text":"<p>Returns the pandas.DataFrame of the buckets.</p> <p>Returns:</p> Type Description <code>DataFrame</code> Source code in <code>egytech_api/core.py</code> <pre><code>def get_df(self) -&gt; pd.DataFrame:\n    \"\"\"Returns the pandas.DataFrame of the buckets.\n\n    Returns\n    -------\n    pd.DataFrame\n\n    \"\"\"\n    return self._buckets\n</code></pre>"},{"location":"classes/stats/#egytech_api.core.Stats.get_stats","title":"<code>get_stats()</code>","text":"<p>Returns the statistics from the API Call.</p> <p>Returns:</p> Type Description <code>Dict[str, str]</code> Source code in <code>egytech_api/core.py</code> <pre><code>def get_stats(self) -&gt; Dict[str, str]:\n    \"\"\"Returns the statistics from the API Call.\n\n    Returns\n    -------\n    Dict[str, str]\n\n    \"\"\"\n    return self._stats\n</code></pre>"},{"location":"classes/stats/#egytech_api.core.Stats.model_post_init","title":"<code>model_post_init(__context)</code>","text":"<p>Placeholder that calls execute_call() on self with given query parameters after initialization of the pydantic model for the available query parameters with the correct specification.</p> <p>Parameters:</p> Name Type Description Default <code>__context</code> <code>Any</code> required <p>Returns:</p> Type Description <code>None</code> Source code in <code>egytech_api/core.py</code> <pre><code>def model_post_init(self, __context: Any) -&gt; None:\n    \"\"\"Placeholder that calls execute_call() on self with given query parameters after initialization of the\n    pydantic model for the available query parameters with the correct specification.\n\n    Parameters\n    ----------\n    __context : Any\n\n    Returns\n    -------\n    None\n\n    \"\"\"\n    self.execute_call()\n</code></pre>"},{"location":"classes/stats/#egytech_api.core.Stats.save_csv","title":"<code>save_csv(filename)</code>","text":"<p>Saves the buckets DataFrame to a CSV file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>The filename to save the CSV file to. This should not include the file extension. Example: \"buckets\" would lead to a file named \"buckets.csv\".</p> required <p>Returns:</p> Type Description <code>None</code> Source code in <code>egytech_api/core.py</code> <pre><code>def save_csv(self, filename: str) -&gt; None:\n    \"\"\"Saves the buckets DataFrame to a CSV file.\n\n    Parameters\n    ----------\n    filename : str\n        The filename to save the CSV file to. This should not include the file extension.\n        Example: \"buckets\" would lead to a file named \"buckets.csv\".\n\n    Returns\n    -------\n    None\n\n    \"\"\"\n    self._buckets.to_csv(filename + \".csv\", index=False)\n</code></pre>"},{"location":"classes/stats/#egytech_api.core.Stats.save_excel","title":"<code>save_excel(filename)</code>","text":"<p>Saves the buckets DataFrame to an Excel file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>The filename to save the Excel file to. This should not include the file extension. Example: \"buckets\" would lead to a file named \"buckets.xlsx\".</p> required <p>Returns:</p> Type Description <code>None</code> Source code in <code>egytech_api/core.py</code> <pre><code>def save_excel(self, filename: str) -&gt; None:\n    \"\"\"Saves the buckets DataFrame to an Excel file.\n\n    Parameters\n    ----------\n    filename : str\n        The filename to save the Excel file to. This should not include the file extension.\n        Example: \"buckets\" would lead to a file named \"buckets.xlsx\".\n\n    Returns\n    -------\n    None\n\n    \"\"\"\n    self._buckets.to_excel(\n        filename + \".xlsx\", index=False, engine=\"xlsxwriter\"\n    )\n</code></pre>"},{"location":"examples/using-the-pooling-client/","title":"Using The Pooling Client","text":"<p>In this example, we explain how the egytech_api PoolingClient can be used to leverage connection pooling and make multiple requests at once by just specifying the request parameters in a dictionary.</p>"},{"location":"examples/using-the-pooling-client/#create-your-queries","title":"Create Your Queries","text":"<p>In order to use the Pooling Client for making multiple API calls, we have to prepare our queries first as such:</p>"},{"location":"examples/using-the-pooling-client/#first-method-recommended","title":"First Method (Recommended):","text":"<p>In this method, we create multiple <code>ParticipantsQueryParams</code> objects and compile them into a list:</p> <pre><code>from egytech_api.models import ParticipantsQueryParams\n\n# Prepare your queries as ParticipantsQueryParams instances\n\n# Method 1:\n# This method is better in the sense that it allows auto-completion and linters to\n# check input validity\nquery1 = ParticipantsQueryParams(title=\"backend\", cs_degree=True)\nquery2 = ParticipantsQueryParams(title=\"frontend\", gender=\"female\")\nqueryn = ParticipantsQueryParams(title=\"fullstack\", include_relocated=False)\n\n# Create a list of your queries\nparams_objs = [query1, query2, queryn]\n</code></pre>"},{"location":"examples/using-the-pooling-client/#second-method","title":"Second Method:","text":"<p>In this method, we simply create a list of dictionaries, each of which represent one query. This will unfortunately not be compatible with code auto-complete and your IDE won't be able to check if you have made the right inputs as you type. Instead, you'll find out during run-time.</p> <pre><code>from egytech_api.models import ParticipantsQueryParams\n\n# Prepare your queries as ParticipantsQueryParams instances\n\n# Method 2:\nquery_list = [\n    {\"title\": \"backend\", \"cs_degree\": True},  # first query\n    {\"title\": \"frontend\", \"gender\": \"female\"},  # second query\n    {\"title\": \"fullstack\", \"include_relocated\": False},  # Nth query\n]\n\n# Create a list of your queries as ParticipantsQueryParams objects\nparams_objs = [ParticipantsQueryParams(**query) for query in query_list]\n</code></pre> <ul> <li>While both of the above methods will produce the same output (a list of <code>ParticipantsQueryParams</code> instances),     it's always advisable to use the linter-friendly method, as it prevents many minor issues     (because of typos for example) ahead of run-time.</li> <li>It's also notable that the second method is more compatible with an external form of query     storage (a local json file for example) as well as being more compatible with larger scale     queries (more than 10 for example).</li> </ul>"},{"location":"examples/using-the-pooling-client/#initialize-a-poolingclient-instance-fetch-the-data","title":"Initialize A PoolingClient Instance &amp; Fetch The Data","text":"<p>Here, we initialize an instance of egytech_api.core.PoolingClient. This client automatically executes the api calls with the given parameters, leveraging connection pooling, a feature provided by httpx. The client then aggregates the resulting data into a pandas.DataFrame instance which you can use for whatever you want.</p> <pre><code>from egytech_api.core import PoolingClient\n\n# Initialize PoolingClient instance with the params_objs list created above\nclient = PoolingClient(queries=params_objs)\n\n# Export resulting data to a pandas.DataFrame instance\ndf = client.get_df()\n\n# Do awesome things with the DataFrame\n</code></pre> <p>While connection pooling is a very cool feature that could potentially cut the runtime of your code significantly, its use on the scale of this project is a bit of an overkill as its scale is not that large. However, I did it as a personal project, and that's where most of the wrapper features come from.</p> <p>You can find a full notebook with a couple of simple visualizations here.</p>"}]}